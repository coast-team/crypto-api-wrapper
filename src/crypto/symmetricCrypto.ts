// Licensed to Inria Grand-Est / Loria under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Inria Grand-Est / Loria licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import { env } from '../misc/env'
import { defaultCryptoKeyDataFormat } from './helper/cryptoHelper'
import {
  defaultImportEncryptionParams,
  defaultSymmetricEncryptionParams,
  getDefaultEncryptParams,
  joinNonceCiphertext,
  splitNonceCiphertext,
} from './helper/symmetricCryptoHelper'

/**
 * generateEncryptionKey generates a cryptoKeyPair with sane defaults to be used for symmetric encryption purpose.
 *
 * @see {@link defaultSymmetricEncryptionParams}
 */
export async function generateEncryptionKey(): Promise<CryptoKey> {
  return env.crypto.subtle.generateKey(
    defaultSymmetricEncryptionParams,
    true, // whether the key is extractable (i.e. can be used in exportKey)
    ['encrypt', 'decrypt']
  )
}

/**
 * exportKey exports a CryptoKey to a JSON Web Key.
 * The CryptoKeyPair should be the same as returned by {@link generateEncryptionKey}.
 */
export async function exportKey(cryptoKey: CryptoKey): Promise<JsonWebKey> {
  return env.crypto.subtle.exportKey(defaultCryptoKeyDataFormat, cryptoKey)
}

/**
 * toB64 encodes the given JSON Web Key to the base64 representation
 */
export function toB64(keyData: JsonWebKey): string {
  return btoa(JSON.stringify(keyData))
}

/**
 * fromB64 decodes the given Base64 to the corresponding JSON Web Key representation.
 */
export function fromB64(keyDataB64: string): JsonWebKey {
  return JSON.parse(atob(keyDataB64))
}

/**
 * importKey imports a JSON Web Key to a CryptoKey.
 * The JSON Web Key should be the same as returned by {@link exportKey}.
 */
export async function importKey(cryptoKeyData: JsonWebKey): Promise<CryptoKey> {
  return env.crypto.subtle.importKey(defaultCryptoKeyDataFormat, cryptoKeyData, defaultImportEncryptionParams as any, true, [
    'encrypt',
    'decrypt',
  ])
}

/**
 * encrypt returns the ciphertext of the given plaintext.
 *
 * @param encryptionKey The secret key used to encrypt (generated by {@link generateEncryptionKey}).
 */
export async function encrypt(plaintext: Uint8Array, encryptionKey: CryptoKey): Promise<Uint8Array> {
  const params = getDefaultEncryptParams(true)
  const ciphertext = await env.crypto.subtle.encrypt(params, encryptionKey, plaintext)
  return joinNonceCiphertext(params.iv, new Uint8Array(ciphertext))
}

/**
 * decrypt decrypts the given ciphertext.
 *
 * @param encryptionKey The secret key used to decrypt (same as the one to encrypt, generated by
 * {@link generateEncryptionKey}).
 */
export async function decrypt(data: Uint8Array, encryptionKey: CryptoKey): Promise<Uint8Array> {
  const [nonce, ciphertext] = await splitNonceCiphertext(data)
  const params = getDefaultEncryptParams(false)
  params.iv = nonce
  const buffer = await env.crypto.subtle.decrypt(params, encryptionKey, ciphertext)
  return new Uint8Array(buffer)
}
